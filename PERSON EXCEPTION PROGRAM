PERSON CLASS:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PersonException
{
    class Person
    {

            string FirstName;
            string LastName;
            string emailid;
            DateTime DateOfBirth;

            public Person(string Fname, string Lname, string email, DateTime dob)
            {
                FirstName = Fname;
                LastName = Lname;
                emailid = email;
                DateOfBirth = dob;
                //Console.WriteLine("Fname {0} Lname {1} email {2} Date of Birth{3}",FirstName,LastName,emailid,DateOfBirth);
            }


            public void validate(string first_name,string last_name)
        {

            foreach (char c in first_name)
            {
                bool ck = char.IsDigit(c);
                if (first_name == String.Empty || ck)
                {

                    throw new NullOrDigitException("First Name cannot be null or empty string");

                }
            }
                
            
                foreach (char ch in last_name)
                {
                bool ck = char.IsDigit(ch);
                if (last_name == String.Empty || ck)
                    {

                        throw new ArgumentException(" Last Name cannot be null or empty string");

                    }
                    

                }
            


        }



            public Boolean isAdult()
            {
                DateTime now = DateTime.Today;
                int age = now.Year - DateOfBirth.Year;

                if (age > 18)
                {
                    return true;
                }

                else
                {
                    return false;
                }
            }


            public string sunSign()
            {

                int month = DateOfBirth.Month;
                int day = DateOfBirth.Day;

                switch (month)
                {
                    case 1:
                        if (day <= 19)
                            return "Capricorn";
                        else
                            return "Aquarius";
                    case 2:
                        if (day <= 19)
                            return "Aquarius";
                        else
                            return "Pisces";
                    case 3:
                        if (day <= 20)
                            return "Pisces";
                        else
                            return "Aries";
                    case 4:
                        if (day <= 19)
                            return "Aries";
                        else
                            return "Tauras";
                    case 5:
                        if (day <= 20)
                            return "Taurus";
                        else
                            return "Gemini";
                    case 6:
                        if (day <= 20)
                            return "Gemini";
                        else
                            return "Cancer";
                    case 7:
                        if (day <= 21)
                            return "Cancer";
                        else
                            return "Leo";
                    case 8:
                        if (day <= 21)
                            return "Leo";
                        else
                            return "Virgo";
                    case 9:
                        if (day <= 21)
                            return "Virgo";
                        else
                            return "Libra";
                    case 10:
                        if (day <= 21)
                            return "Libra";
                        else
                            return "Scorpio";
                    case 11:
                        if (day <= 21)
                            return "Scorpio";
                        else
                            return "Saggittarius";
                    case 12:
                        if (day <= 21)
                            return "Saggittarius";
                        else
                            return "Capricorn";

                }

                return " ";

            }

            public bool isBirthday()
            {


                DateTime now = DateTime.Now;


                if (now.DayOfYear == DateOfBirth.DayOfYear)
                {
                    return true;
                }
                else
                    return false;

            }

            public string ScreenName()
            {

                //string str = DateOfBirth.ToString("yyyyMMdd");
                int month = DateOfBirth.Month;
                int year = DateOfBirth.Year;
                int day = DateOfBirth.Day;

                string str_month = Convert.ToString(month);
                string str_year = Convert.ToString(year);
                string sub_str_year = str_year.Substring(2);
                string str_day = Convert.ToString(day);

                string final = str_month + str_day + sub_str_year;


                string username = FirstName + LastName + final;
                return username;




            }
        }
    }


EXCEPTION CLASS
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PersonException
{
    class NullOrDigitException:Exception
    {

        public NullOrDigitException(string message):base(message)
        {

        }



    }
}

program class

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PersonException
{
    class Program
    {
        static void Main(string[] args)
        {
            DateTime value = new DateTime(1996, 12, 31);

            Person o = new Person("Nihar", "Ranjan", "xyz@gmail.com", value);
            try
            {

                o.validate("Nihar", "Ranjan");

            }
            catch (FormatException)
            {
                Console.WriteLine(" Enter correct input which has no digit or is not null:");
                

            }


            bool x = o.isAdult();


            if (x == true)
            {
                Console.WriteLine("The person is above 18 years old");
            }
            else
            {
                Console.WriteLine("The person is below 18 years old");
            }

            string sunsign = o.sunSign();
            Console.WriteLine("The sunsign of the person is {0}", sunsign);

            bool b = o.isBirthday();

            if (b == true)
            {
                Console.WriteLine("The person' birthday is today");
            }
            else
            {
                Console.WriteLine("The person's birthday is not today");
            }

            string username = o.ScreenName();
            Console.WriteLine("The username of the person is {0}", username);

            
        }
    }
}



